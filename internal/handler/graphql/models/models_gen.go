// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"

	"github.com/bzp2010/schedule/internal/database/models"
)

// Definition of the base fields of the data model
type Model interface {
	IsModel()
	// Entry ID
	GetID() int64
	// Entry created time
	GetCreatedAt() int64
	// Entry updated time
	GetUpdatedAt() int64
}

// TaskConfiguration is an aggregated type of multiple configurations
type TaskConfiguration interface {
	IsTaskConfiguration()
}

// CreateTask is the data structure used by mutation of create Task
type CreateTask struct {
	// Task name
	Name string `json:"name"`
	// Task type (SHELL, WEBHOOK)
	Type models.TaskType `json:"type"`
	// Task configuration
	Configuration *InputTaskConfiguration `json:"configuration"`
	// Status of the task
	Status *models.Status `json:"status"`
}

// InputTaskConfiguration is a collection type of InputTaskConfigurationShell and InputTaskConfigurationWebhook,
// which is an alternative to the temporarily unsupported inputUnion
type InputTaskConfiguration struct {
	// Shell task configuration
	Shell *models.TaskConfigurationShell `json:"shell"`
	// Webhook task configuration
	Webhook *models.TaskConfigurationWebhook `json:"webhook"`
}

// HTTPMethod indicates the list of HTTP methods
type HTTPMethod string

const (
	HTTPMethodGet     HTTPMethod = "GET"
	HTTPMethodHead    HTTPMethod = "HEAD"
	HTTPMethodPost    HTTPMethod = "POST"
	HTTPMethodPut     HTTPMethod = "PUT"
	HTTPMethodPatch   HTTPMethod = "PATCH"
	HTTPMethodDelete  HTTPMethod = "DELETE"
	HTTPMethodConnect HTTPMethod = "CONNECT"
	HTTPMethodOptions HTTPMethod = "OPTIONS"
	HTTPMethodTrace   HTTPMethod = "TRACE"
)

var AllHTTPMethod = []HTTPMethod{
	HTTPMethodGet,
	HTTPMethodHead,
	HTTPMethodPost,
	HTTPMethodPut,
	HTTPMethodPatch,
	HTTPMethodDelete,
	HTTPMethodConnect,
	HTTPMethodOptions,
	HTTPMethodTrace,
}

func (e HTTPMethod) IsValid() bool {
	switch e {
	case HTTPMethodGet, HTTPMethodHead, HTTPMethodPost, HTTPMethodPut, HTTPMethodPatch, HTTPMethodDelete, HTTPMethodConnect, HTTPMethodOptions, HTTPMethodTrace:
		return true
	}
	return false
}

func (e HTTPMethod) String() string {
	return string(e)
}

func (e *HTTPMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HTTPMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HTTPMethod", str)
	}
	return nil
}

func (e HTTPMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
