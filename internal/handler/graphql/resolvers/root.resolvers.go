package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"

	"github.com/bzp2010/schedule/internal/database"
	"github.com/bzp2010/schedule/internal/database/models"
	"github.com/bzp2010/schedule/internal/handler/graphql/consts"
	"github.com/bzp2010/schedule/internal/handler/graphql/generated"
	models1 "github.com/bzp2010/schedule/internal/handler/graphql/models"
	"github.com/pkg/errors"
)

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input models1.CreateTask) (*models.Task, error) {
	task := models.Task{
		Name:            input.Name,
		Type:            input.Type,
		LastRunningAt:   sql.NullTime{Valid: false},
		LastRunningTime: 0,
	}

	if input.Status != nil {
		task.Status = *input.Status
	} else {
		task.Status = models.StatusEnabled
	}

	var err error
	switch input.Type {
	case models.TaskTypeShell:
		if input.Configuration.Shell == nil {
			return nil, errors.New("shell configuration cannot be empty")
		}
		task.Configuration, err = json.Marshal(input.Configuration.Shell)
	case models.TaskTypeWebhook:
		if input.Configuration.Webhook == nil {
			return nil, errors.New("webhook configuration cannot be empty")
		}
		task.Configuration, err = json.Marshal(input.Configuration.Webhook)
	}

	if err != nil {
		return nil, errors.Wrap(err, "failed to process configuration")
	}

	result := database.GetDatabase().Create(&task)
	if err := result.Error; err != nil {
		return nil, errors.Wrap(err, "failed to create task")
	}
	if result.RowsAffected < 1 {
		return nil, errors.New("failed to create task: data is not written")
	}

	//TODO reload all task
	return &task, nil
}

// Task is the resolver for the task field.
func (r *queryResolver) Task(ctx context.Context, id int64) (*models.Task, error) {
	var task models.Task
	result := database.GetDatabase().Where("id = ?", id).Find(&task)
	if err := result.Error; err != nil {
		return nil, err
	}
	if result.RowsAffected <= 0 {
		return nil, errors.Errorf("task does not exist: id %d", id)
	}
	return &task, nil
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context, limit int, offset int) ([]models.Task, error) {
	if limit <= 0 {
		return nil, consts.ErrLimitEmpty
	}

	var tasks []models.Task
	result := database.GetDatabase().Offset(offset).Limit(limit).Find(&tasks)
	if err := result.Error; err != nil {
		return nil, err
	}
	return tasks, nil
}

// Job is the resolver for the job field.
func (r *queryResolver) Job(ctx context.Context, id int64) (*models.Job, error) {
	var job models.Job
	result := database.GetDatabase().Where("id = ?", id).Find(&job)
	if err := result.Error; err != nil {
		return nil, err
	}
	if result.RowsAffected <= 0 {
		return nil, fmt.Errorf("job does not exist: id %d", id)
	}
	return &job, nil
}

// Jobs is the resolver for the jobs field.
func (r *queryResolver) Jobs(ctx context.Context, limit int, offset int, reverseOrder bool) ([]models.Job, error) {
	if limit <= 0 {
		return nil, consts.ErrLimitEmpty
	}

	var jobs []models.Job
	result := database.GetDatabase().Offset(offset).Limit(limit)

	// reverse order by ID by default (i.e. view recent data)
	if reverseOrder {
		result.Order("id desc")
	}

	result.Find(&jobs)
	if err := result.Error; err != nil {
		return nil, err
	}
	return jobs, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
