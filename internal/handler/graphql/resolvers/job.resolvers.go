package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"

	"github.com/bzp2010/schedule/internal/database"
	"github.com/bzp2010/schedule/internal/database/models"
	"github.com/bzp2010/schedule/internal/handler/graphql/generated"
)

// ID is the resolver for the id field.
func (r *jobResolver) ID(ctx context.Context, obj *models.Job) (int64, error) {
	return obj.GetID(), nil
}

// Task is the resolver for the task field.
func (r *jobResolver) Task(ctx context.Context, obj *models.Job) (*models.Task, error) {
	var task models.Task
	err := database.GetDatabase().Model(obj).Association("Task").Find(&task)
	if err != nil {
		return nil, err
	}
	return &task, nil
}

// TaskRule is the resolver for the task_rule field.
func (r *jobResolver) TaskRule(ctx context.Context, obj *models.Job) (*models.TaskRule, error) {
	var taskRule models.TaskRule
	err := database.GetDatabase().Model(obj).Association("TaskRule").Find(&taskRule)
	if err != nil {
		return nil, err
	}
	return &taskRule, nil
}

// StartAt is the resolver for the start_at field.
func (r *jobResolver) StartAt(ctx context.Context, obj *models.Job) (int64, error) {
	return obj.StartAt.UnixMilli(), nil
}

// StopAt is the resolver for the stop_at field.
func (r *jobResolver) StopAt(ctx context.Context, obj *models.Job) (int64, error) {
	return obj.StopAt.UnixMilli(), nil
}

// IsTimeout is the resolver for the is_timeout field.
func (r *jobResolver) IsTimeout(ctx context.Context, obj *models.Job) (bool, error) {
	return obj.HasFlag(models.JobFlagTimeout), nil
}

// CreatedAt is the resolver for the created_at field.
func (r *jobResolver) CreatedAt(ctx context.Context, obj *models.Job) (int64, error) {
	return obj.GetCreatedAt(), nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *jobResolver) UpdatedAt(ctx context.Context, obj *models.Job) (int64, error) {
	return obj.GetUpdatedAt(), nil
}

// Job returns generated.JobResolver implementation.
func (r *Resolver) Job() generated.JobResolver { return &jobResolver{r} }

type jobResolver struct{ *Resolver }
