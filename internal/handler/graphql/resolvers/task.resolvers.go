package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"encoding/json"
	"errors"

	"github.com/bzp2010/schedule/internal/database"
	"github.com/bzp2010/schedule/internal/database/models"
	"github.com/bzp2010/schedule/internal/handler/graphql/consts"
	"github.com/bzp2010/schedule/internal/handler/graphql/generated"
	models1 "github.com/bzp2010/schedule/internal/handler/graphql/models"
	"github.com/icza/gog"
)

// ID is the resolver for the id field.
func (r *taskResolver) ID(ctx context.Context, obj *models.Task) (int64, error) {
	return obj.GetID(), nil
}

// Type is the resolver for the type field.
func (r *taskResolver) Type(ctx context.Context, obj *models.Task) (models.TaskType, error) {
	return obj.Type, nil
}

// Configuration is the resolver for the configuration field.
func (r *taskResolver) Configuration(ctx context.Context, obj *models.Task) (models1.TaskConfiguration, error) {
	var err error
	switch obj.Type {
	case models.TaskTypeShell:
		cfg := models.TaskConfigurationShell{}
		err = json.Unmarshal([]byte(obj.Configuration.String()), &cfg)
		if err == nil {
			return cfg, err
		}
	case models.TaskTypeWebhook:
		cfg := models.TaskConfigurationWebhook{}
		err = json.Unmarshal([]byte(obj.Configuration.String()), &cfg)
		if err == nil {
			return cfg, err
		}
	default:
		return nil, errors.New("unknown task type")
	}

	return nil, err
}

// Rules is the resolver for the rules field.
func (r *taskResolver) Rules(ctx context.Context, obj *models.Task, limit int, offset int) ([]models.TaskRule, error) {
	if limit <= 0 {
		return nil, consts.ErrLimitEmpty
	}

	var taskRules []models.TaskRule
	result := database.GetDatabase().
		Where("task_id = ?", obj.ID).
		Limit(limit).
		Offset(offset).
		Find(&taskRules)
	if err := result.Error; err != nil {
		return nil, err
	}
	return taskRules, nil
}

// Jobs is the resolver for the jobs field.
func (r *taskResolver) Jobs(ctx context.Context, obj *models.Task, limit int, offset int, reverseOrder bool) ([]models.Job, error) {
	if limit <= 0 {
		return nil, consts.ErrLimitEmpty
	}

	var jobs []models.Job
	result := database.GetDatabase().
		Where("task_id = ?", obj.ID).
		Limit(limit).
		Offset(offset)

	// reverse order by ID by default (i.e. view recent data)
	if reverseOrder {
		result.Order("id desc")
	}

	result.Find(&jobs)
	if err := result.Error; err != nil {
		return nil, err
	}
	return jobs, nil
}

// LastRunningAt is the resolver for the last_running_at field.
func (r *taskResolver) LastRunningAt(ctx context.Context, obj *models.Task) (int64, error) {
	return gog.If(
		obj.LastRunningAt.Valid,
		obj.LastRunningAt.Time.UnixMilli(),
		int64(0),
	), nil
}

// CreatedAt is the resolver for the created_at field.
func (r *taskResolver) CreatedAt(ctx context.Context, obj *models.Task) (int64, error) {
	return obj.GetCreatedAt(), nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *taskResolver) UpdatedAt(ctx context.Context, obj *models.Task) (int64, error) {
	return obj.GetUpdatedAt(), nil
}

// Timeout is the resolver for the timeout field.
func (r *taskConfigurationShellResolver) Timeout(ctx context.Context, obj *models.TaskConfigurationShell) (int64, error) {
	return obj.Timeout.Milliseconds(), nil
}

// Method is the resolver for the method field.
func (r *taskConfigurationWebhookResolver) Method(ctx context.Context, obj *models.TaskConfigurationWebhook) (models1.HTTPMethod, error) {
	return models1.HTTPMethod(obj.Method), nil
}

// Task returns generated.TaskResolver implementation.
func (r *Resolver) Task() generated.TaskResolver { return &taskResolver{r} }

// TaskConfigurationShell returns generated.TaskConfigurationShellResolver implementation.
func (r *Resolver) TaskConfigurationShell() generated.TaskConfigurationShellResolver {
	return &taskConfigurationShellResolver{r}
}

// TaskConfigurationWebhook returns generated.TaskConfigurationWebhookResolver implementation.
func (r *Resolver) TaskConfigurationWebhook() generated.TaskConfigurationWebhookResolver {
	return &taskConfigurationWebhookResolver{r}
}

type taskResolver struct{ *Resolver }
type taskConfigurationShellResolver struct{ *Resolver }
type taskConfigurationWebhookResolver struct{ *Resolver }
