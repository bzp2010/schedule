package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"

	"github.com/bzp2010/schedule/internal/database"
	"github.com/bzp2010/schedule/internal/database/models"
	"github.com/bzp2010/schedule/internal/handler/graphql/consts"
	"github.com/bzp2010/schedule/internal/handler/graphql/generated"
	"github.com/icza/gog"
)

// ID is the resolver for the id field.
func (r *taskRuleResolver) ID(ctx context.Context, obj *models.TaskRule) (int64, error) {
	return obj.GetID(), nil
}

// Task is the resolver for the task field.
func (r *taskRuleResolver) Task(ctx context.Context, obj *models.TaskRule) (*models.Task, error) {
	var task models.Task
	err := database.GetDatabase().Model(obj).Association("Task").Find(&task)
	if err != nil {
		return nil, err
	}
	return &task, nil
}

// Description is the resolver for the description field.
func (r *taskRuleResolver) Description(ctx context.Context, obj *models.TaskRule) (string, error) {
	return gog.If(
		obj.Description.Valid,
		obj.Description.String,
		"",
	), nil
}

// LastRunningAt is the resolver for the last_running_at field.
func (r *taskRuleResolver) LastRunningAt(ctx context.Context, obj *models.TaskRule) (int64, error) {
	return gog.If(
		obj.LastRunningAt.Valid,
		obj.LastRunningAt.Time.UnixMilli(),
		int64(0),
	), nil
}

// Jobs is the resolver for the jobs field.
func (r *taskRuleResolver) Jobs(ctx context.Context, obj *models.TaskRule, limit int, offset int, reverseOrder bool) ([]models.Job, error) {
	if limit <= 0 {
		return nil, consts.ErrLimitEmpty
	}

	var jobs []models.Job
	result := database.GetDatabase().
		Where("task_rule_id = ?", obj.ID).
		Limit(limit).
		Offset(offset)

	// reverse order by ID by default (i.e. view recent data)
	if reverseOrder {
		result.Order("id desc")
	}

	result.Find(&jobs)
	if err := result.Error; err != nil {
		return nil, err
	}
	return jobs, nil
}

// CreatedAt is the resolver for the created_at field.
func (r *taskRuleResolver) CreatedAt(ctx context.Context, obj *models.TaskRule) (int64, error) {
	return obj.GetCreatedAt(), nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *taskRuleResolver) UpdatedAt(ctx context.Context, obj *models.TaskRule) (int64, error) {
	return obj.GetUpdatedAt(), nil
}

// TaskRule returns generated.TaskRuleResolver implementation.
func (r *Resolver) TaskRule() generated.TaskRuleResolver { return &taskRuleResolver{r} }

type taskRuleResolver struct{ *Resolver }
